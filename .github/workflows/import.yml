#
# Import Resources
#
# This workflow runs periodically and under given triggers on the main branch
# and imports resources from external repositories, prepares them for
# publication and then pushes them to main. If nothing changed, no commit
# will be created nor pushed.
#
# Note that Github operations triggered from a workflow will *NEVER* trigger
# other workflows. Therefore, no precautions are necessary to prevent entering
# into loops.
#

name: Import Resources

on:
  push:
    branches:
    - main
  schedule:
  - cron:  '0 0 * * *'

concurrency: wf-import

jobs:
  import:
    name: Import Resources to be Published
    runs-on: ubuntu-latest

    steps:
    #
    # System Setup
    #
    # Install all dependencies required to generate a wide range of resources
    # we import from external repositories.
    #
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install \
          groff \
          perl \
          python3-docutils \
          python3-setuptools
    - name: Configure GIT
      run: |
        git config --global user.name "Automation"
        git config --global user.email "automation@osbuild.org"

    #
    # Configuration Variables
    #
    # This fetches external information like osbuild release version numbers,
    # etc., and saves them as output variables. This makes them available to
    # following steps as:
    #
    #     ${{ steps.config.outputs.OSBUILD_VERSION }}
    #         Evaluates to the latest osbuild release tag-name. This is usually
    #         the version number prefixed with 'v'.
    #
    #     ${{ steps.config.outputs.OSBUILD_COMPOSER_VERSION }}
    #         Evaluates to the latest osbuild-composer release tag-name. This
    #         is usually the version number prefixed with 'v'.
    #
    - name: Declare Configuration Variables
      id: config
      run: |
        OSBUILD_VERSION=$(curl --silent "https://api.github.com/repos/osbuild/osbuild/releases/latest" | jq -r .tag_name)
        OSBUILD_COMPOSER_VERSION=$(curl --silent "https://api.github.com/repos/osbuild/osbuild-composer/releases/latest" | jq -r .tag_name)
        echo "OSBUILD_VERSION=${OSBUILD_VERSION}" >>$GITHUB_OUTPUT
        echo "OSBUILD_COMPOSER_VERSION=${OSBUILD_COMPOSER_VERSION}" >>$GITHUB_OUTPUT

    #
    # Setup Checkout
    #
    # Fetch the local repository, as well as all external ones that we need
    # data from. The local one is cloned into `webpages`, the external ones
    # into their respective subdirectories.
    #
    - name: Clone local repository
      uses: actions/checkout@v2
      with:
        path: webpages
    - name: Clone osbuild repository
      uses: actions/checkout@v2
      with:
        repository: osbuild/osbuild
        ref: ${{ steps.config.outputs.OSBUILD_VERSION }}
        path: osbuild
    - name: Clone osbuild-composer repository
      uses: actions/checkout@v2
      with:
        repository: osbuild/osbuild-composer
        ref: ${{ steps.config.outputs.OSBUILD_COMPOSER_VERSION }}
        path: osbuild-composer

    #
    # Import Schemas
    #
    # Import all the schema files from the different repositories and make them
    # available in a combined `schemas/` directory.
    #
    - name: Import Schemas
      run: |
        rm -rf "webpages/schemas"
        cp -rt "webpages/" "osbuild/schemas"

    #
    # Import Manpages
    #
    # Build all man-pages and make them available in a combined
    # directory. We use `groff` to convert man-pages to XHTML and then strip
    # everything but the body via `perl -e`, while appending an empty front
    # matter.
    #
    - name: Build Manpages
      run: |
        make man -f osbuild/Makefile SRCDIR=osbuild BUILDDIR=build
        for MAN in build/docs/* ; do
          echo "Generating: ${MAN}.html"
          cat "${MAN}" | \
            groff -mandoc -Txhtml -P -r -P -l | \
            perl -0777 -pe 's|^.*?<body>(.*)</body>.*?$|---\n---\n\1|s' \
            >"${MAN}.html"
        done
    - name: Import Manpages
      run: |
        rm -rf "webpages/_collections/_manpages"
        mkdir -p "webpages/_collections/_manpages/"
        cp -t "webpages/_collections/_manpages/" build/docs/*.html

    #
    # Deploy Imported Resources
    #
    # Create an automated commit with all modified resources. If the commit was
    # non-empty (i.e., `git commit` did not fail), push it out.
    #
    - name: Deploy Imported Resources
      working-directory: webpages
      run: |
        git add --all .
        git commit -m "Import external resources" || echo "Nothing changed."
        git push
